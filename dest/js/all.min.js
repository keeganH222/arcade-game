/* Resources.js
 * This is simply an image loading utility. It eases the process of loading
 * image files so that they can be used within your game. It also includes
 * a simple "caching" layer so it will reuse cached images if you attempt
 * to load the same image multiple times.
 */
(function () {
    var resourceCache = {};
    var readyCallbacks = [];

    /* This is the publicly accessible image loading function. It accepts
     * an array of strings pointing to image files or a string for a single
     * image. It will then call our private image loading function accordingly.
     */
    function load(urlOrArr) {
        if (urlOrArr instanceof Array) {
            /* If the developer passed in an array of images
             * loop through each value and call our image
             * loader on that image file
             */
            urlOrArr.forEach(function (url) {
                _load(url);
            });
        } else {
            /* The developer did not pass an array to this function,
             * assume the value is a string and call our image loader
             * directly.
             */
            _load(urlOrArr);
        }
    }

    /* This is our private image loader function, it is
     * called by the public image loader function.
     */
    function _load(url) {
        if (resourceCache[url]) {
            /* If this URL has been previously loaded it will exist within
             * our resourceCache array. Just return that image rather than
             * re-loading the image.
             */
            return resourceCache[url];
        } else {
            /* This URL has not been previously loaded and is not present
             * within our cache; we'll need to load this image.
             */
            var img = new Image();
            img.onload = function () {
                /* Once our image has properly loaded, add it to our cache
                 * so that we can simply return this image if the developer
                 * attempts to load this file in the future.
                 */
                resourceCache[url] = img;

                /* Once the image is actually loaded and properly cached,
                 * call all of the onReady() callbacks we have defined.
                 */
                if (isReady()) {
                    readyCallbacks.forEach(function (func) {
                        func();
                    });
                }
            };

            /* Set the initial cache value to false, this will change when
             * the image's onload event handler is called. Finally, point
             * the image's src attribute to the passed in URL.
             */
            resourceCache[url] = false;
            img.src = url;
        }
    }

    /* This is used by developers to grab references to images they know
     * have been previously loaded. If an image is cached, this functions
     * the same as calling load() on that URL.
     */
    function get(url) {
        return resourceCache[url];
    }

    /* This function determines if all of the images that have been requested
     * for loading have in fact been properly loaded.
     */
    function isReady() {
        var ready = true;
        for (var k in resourceCache) {
            if (resourceCache.hasOwnProperty(k) &&
                !resourceCache[k]) {
                ready = false;
            }
        }
        return ready;
    }

    /* This function will add a function to the callback stack that is called
     * when all requested images are properly loaded.
     */
    function onReady(func) {
        readyCallbacks.push(func);
    }

    /* This object defines the publicly accessible functions available to
     * developers by creating a global Resources object.
     */
    window.Resources = {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
    };
})();

let level = rand();

function rand() {
  let counter = 3;
  let bugSprint = true;
  return (won) => {

    if (won) {
      counter += 5;
      let randNum = 10 + Math.floor(Math.random() * counter);
      return randNum;
    
    } else if (player.bugIntervals > 1400) {
      let randNum = Math.floor(Math.random() * 20) + counter;
      bugSprint = false;
      return randNum;
    
    } else {
      let randNum = Math.floor(Math.random() * 8) + counter
      bugSprint = true;
      return randNum;
    }
  }
}

class Enemy {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.right = x + 40;
    this.left = x - 30;
    this.bottom = y + 35;
    this.top = y - 15;
    this.sprite = 'images/enemy-bug.png';
    this.counter = level();
  }

  update(dt) {
    this.x += (dt * this.counter) * 10;
    if (this.x > 530) {
      let index = allEnemies.indexOf(this);
      allEnemies.splice(index, 1);
    }
    this.bottom = this.y + 35;
    this.right = this.x + 40;
    this.left = this.x - 30;
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
  }

  render() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
  }
}

class Player {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.top = y - 20;
    this.bottom = y + 30;
    this.right = x + 40;
    this.speedX = 0;
    this.speedY = 0;
    this.speed = 1.5;
    this.bugIntervals = 2000;
    this.level = 1;
    this.look = {
      boy: 'images/char-boy.png',
    };
    this.lives = 3;
  }

  update(hit, won) {
    this.checkBoundary();
    if (hit) {
      this.x = 202;
      this.y = 417;
      this.speedX = 0;
      this.speedY = 0;
      this.bottom = this.y + 30;
      this.right = this.x + 40;
      this.top = this.y - 20;
      ctx.drawImage(Resources.get(this.look.boy), this.x, this.y);
    } else if (!won) {
      this.x += this.speedX;
      this.y += this.speedY;
      this.bottom = this.y + 30;
      this.right = this.x + 30;
      this.top = this.y - 20;
      ctx.drawImage(Resources.get(this.look.boy), this.x, this.y);
    } else {
      this.x = 202;
      this.y = 417;
      this.speedX = 0;
      this.speedY = 0;
    }
    for (let i = this.lives; i > 0; i--) {
      ctx.drawImage(Resources.get('images/Heart.png'), (490 - i * 80), 570);
    }
    this.drawLevel();
    this.won();
    this.gameOver();
  }

  render() {
    ctx.drawImage(Resources.get(this.look.boy), this.x, this.y);
    for (let i = this.lives; i > 0; i--) {
      ctx.drawImage(Resources.get('images/Heart.png'), (490 - i * 80), 570);
    }
    this.drawLive();
    this.drawLevel();
  }

  handleInput(key) {
    if (key === 'left') {
      this.speedX = -this.speed;
    } else if (key === 'right') {
      this.speedX = this.speed;
    } else if (key === 'up') {
      this.speedY = -this.speed;
    } else if (key === 'down') {
      this.speedY = this.speed;
    }
    this.update();

  }

  removeInput(key) {
    if (key === 'left') {
      this.speedX = 0;
    } else if (key === 'right') {
      this.speedX = 0;
    } else if (key === 'up') {
      this.speedY = 0;
    } else if (key === 'down') {
      this.speedY = 0;
    }
    this.update();
  }

  checkBoundary() {
    if (this.x + this.speedX < -14) {
      this.speedX = 0;
      this.x = -12;
    } else if (this.right + this.speedX > 450) {
      this.speedX = 0;
      this.x = 420;
    }
    if (this.y + this.speedY < -35) {
      this.speedY = 0;
      this.y = -32;
    } else if (this.y + this.speedY > 442) {
      this.speedY = 0;
      this.y = 440;
    }
  }

  won() {
    if (this.y <= -10) {
      this.x = 202;
      this.y = 417;
      this.speedX = 0;
      this.speedY = 0;
      ctx.drawImage(Resources.get(this.look.boy), this.x, this.y);
      this.bugSpeed();
    }
  }

  bugSpeed() {
    level(true);
    player.bugIntervals -= 200;
    player.level += 1;
    if (player.bugIntervals === 1400 || player.bugIntervals === 1000 || player.bugIntervals === 800) {
      player.speed += 0.2;
    }
    allEnemies.forEach(bug => {
      bug.counter = level();
    })
  }

  drawLive() {
    ctx.font = '30px Arial';
    ctx.fillText('Lives:', 150, 680);
    ctx.fillText(player.lives, 230, 680);
    //will not respond in game over, nothing gets displayed at the top
    if (this.lives === 0) {
      this.drawEnd();
    }
  }

  drawLevel() {
    ctx.font = '30px Arial';
    ctx.fillText('level: ', 40, 635);
    ctx.fillText(player.level, 110, 635);
  }

  drawEnd() {
    ctx.fillText('Refresh page to play again', 100, 30);
  }

  gameOver() {
    if (this.lives === 0) {
      allEnemies.forEach(bug => {
        bug.x = 0;
        document.removeEventListener('keydown', onKeyDown);
        document.removeEventListener('keyup', onKeyUp);
      })
    }
  }
}
let player = new Player(202, 417);
let allEnemies = [new Enemy(-80, 50), new Enemy(-80, 145), new Enemy(-80, 235)];
const spawnBugs = setInterval(() => {
  allEnemies.push(new Enemy(-80, 50), new Enemy(-80, 145), new Enemy(-80, 235));
}, player.bugIntervals)

function checkCollison() {
  allEnemies.forEach(bug => {
    if (player.x <= bug.right + 30 && player.right >= bug.left) {
      if (player.top <= bug.bottom && player.bottom >= bug.top) {
        player.lives -= 1;
        player.update(true);
      }
    }
  })
}
const onKeyDown = (e) => {
  let allowedKeys = {
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  player.handleInput(allowedKeys[e.keyCode]);
}
const onKeyUp = (e) => {
  let disabledKeys = {
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down',
  }
  player.removeInput(disabledKeys[e.keyCode]);
}
document.addEventListener('keydown', onKeyDown);
document.addEventListener('keyup', onKeyUp);
/* Engine.js
 * This file provides the game loop functionality (update entities and render),
 * draws the initial game board on the screen, and then calls the update and
 * render methods on your player and enemy objects (defined in your app.js).
 *
 * A game engine works by drawing the entire game screen over and over, kind of
 * like a flipbook you may have created as a kid. When your player moves across
 * the screen, it may look like just that image/character is moving or being
 * drawn but that is not the case. What's really happening is the entire "scene"
 * is being drawn over and over, presenting the illusion of animation.
 *
 * This engine makes the canvas' context (ctx) object globally available to make
 * writing app.js a little simpler to work with.
 */

var Engine = (function (global) {
    /* Predefine the variables we'll be using within this scope,
     * create the canvas element, grab the 2D context for that canvas
     * set the canvas element's height/width and add it to the DOM.
     */
    var doc = global.document,
        win = global.window,
        canvas = doc.createElement('canvas'),
        ctx = canvas.getContext('2d'),
        lastTime;

    canvas.width = 505;
    canvas.height = 707;
    doc.body.append(canvas);

    /* This function serves as the kickoff point for the game loop itself
     * and handles properly calling the update and render methods.
     */
    function main() {
        /* Get our time delta information which is required if your game
         * requires smooth animation. Because everyone's computer processes
         * instructions at different speeds we need a constant value that
         * would be the same for everyone (regardless of how fast their
         * computer is) - hurray time!
         */
        var now = Date.now(),
            dt = (now - lastTime) / 1000.0;

        /* Call our update/render functions, pass along the time delta to
         * our update function since it may be used for smooth animation.
         */
        update(dt);
        render();
        /* Set our lastTime variable which is used to determine the time delta
         * for the next time this function is called.
         */
        lastTime = now;

        /* Use the browser's requestAnimationFrame function to call this
         * function again as soon as the browser is able to draw another frame.
         */
        win.requestAnimationFrame(main);
    }


    /* This function does some initial setup that should only occur once,
     * particularly setting the lastTime variable that is required for the
     * game loop.
     */
    function init() {
        reset();
        lastTime = Date.now();
        main();
    }

    /* This function is called by main (our game loop) and itself calls all
     * of the functions which may need to update entity's data. Based on how
     * you implement your collision detection (when two entities occupy the
     * same space, for instance when your character should die), you may find
     * the need to add an additional function call here. For now, we've left
     * it commented out - you may or may not want to implement this
     * functionality this way (you could just implement collision detection
     * on the entities themselves within your app.js file).
     */
    function update(dt) {
        updateEntities(dt);
    }

    /* This is called by the update function and loops through all of the
     * objects within your allEnemies array as defined in app.js and calls
     * their update() methods. It will then call the update function for your
     * player object. These update methods should focus purely on updating
     * the data/properties related to the object. Do your drawing in your
     * render methods.
     */
    function updateEntities(dt) {
        allEnemies.forEach(function (enemy) {
            enemy.update(dt);
        });
        player.update();
        checkCollison();
        if (player.lives === 0) {
            player.drawEnd();
        }
    }

    /* This function initially draws the "game level", it will then call
     * the renderEntities function. Remember, this function is called every
     * game tick (or loop of the game engine) because that's how games work -
     * they are flipbooks creating the illusion of animation but in reality
     * they are just drawing the entire screen over and over.
     */
    function render() {
        /* This array holds the relative URL to the image used
         * for that particular row of the game level.
         */
        var rowImages = [
                'images/water-block.png', // Top row is water
                'images/stone-block.png', // Row 1 of 3 of stone
                /*'images/stone-block.png' this will add another row when ready*/
                'images/stone-block.png', // Row 2 of 3 of stone
                'images/stone-block.png', // Row 3 of 3 of stone
                'images/grass-block.png', // Row 1 of 2 of grass
                'images/grass-block.png' // Row 2 of 2 of grass
            ],
            numRows = 6,
            numCols = 5,
            row, col;

        // Before drawing, clear existing canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        /* Loop through the number of rows and columns we've defined above
         * and, using the rowImages array, draw the correct image for that
         * portion of the "grid"
         */
        for (row = 0; row < numRows; row++) {
            for (col = 0; col < numCols; col++) {
                /* The drawImage function of the canvas' context element
                 * requires 3 parameters: the image to draw, the x coordinate
                 * to start drawing and the y coordinate to start drawing.
                 * We're using our Resources helpers to refer to our images
                 * so that we get the benefits of caching these images, since
                 * we're using them over and over.
                 */
                ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);
            }
        }

        renderEntities();
    }

    /* This function is called by the render function and is called on each game
     * tick. Its purpose is to then call the render functions you have defined
     * on your enemy and player entities within app.js
     */
    function renderEntities() {
        /* Loop through all of the objects within the allEnemies array and call
         * the render function you have defined.
         */
        allEnemies.forEach(function (enemy) {
            enemy.render();
        });

        player.render();
    }

    /* This function does nothing but it could have been a good place to
     * handle game reset states - maybe a new game menu or a game over screen
     * those sorts of things. It's only called once by the init() method.
     */
    function reset() {}

    /* Go ahead and load all of the images we know we're going to need to
     * draw our game level. Then set init as the callback method, so that when
     * all of these images are properly loaded our game will start.
     */
    Resources.load([
        'images/stone-block.png',
        'images/water-block.png',
        'images/grass-block.png',
        'images/enemy-bug.png',
        'images/char-boy.png',
        'images/Heart.png',
    ]);
    Resources.onReady(init);

    /* Assign the canvas' context object to the global variable (the window
     * object when run in a browser) so that developers can use it more easily
     * from within their app.js files.
     */
    global.ctx = ctx;
})(this);
